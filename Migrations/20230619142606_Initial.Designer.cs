// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using griffined_api.Data;

#nullable disable

namespace griffinedapi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230619142606_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("griffined_api.Models.Address", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("district")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("studentId")
                        .HasColumnType("int");

                    b.Property<string>("subdistrict")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("zipcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("studentId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("griffined_api.Models.Appointment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("appointmentStatus")
                        .HasColumnType("int");

                    b.Property<int>("appointmentType")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("griffined_api.Models.AppointmentMember", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("appointmentId")
                        .HasColumnType("int");

                    b.Property<int>("teacherId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("appointmentId");

                    b.HasIndex("teacherId");

                    b.ToTable("AppointmentMembers");
                });

            modelBuilder.Entity("griffined_api.Models.CancellationRequest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("StudySubjectid")
                        .HasColumnType("int");

                    b.Property<int>("classId")
                        .HasColumnType("int");

                    b.Property<string>("requestedDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("role")
                        .HasColumnType("int");

                    b.Property<int>("studentId")
                        .HasColumnType("int");

                    b.Property<int>("studyClassId")
                        .HasColumnType("int");

                    b.Property<int>("studyCourseId")
                        .HasColumnType("int");

                    b.Property<int>("teacherId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("StudySubjectid");

                    b.HasIndex("studentId");

                    b.HasIndex("studyClassId");

                    b.HasIndex("studyCourseId");

                    b.HasIndex("teacherId");

                    b.ToTable("CancellationRequests");
                });

            modelBuilder.Entity("griffined_api.Models.Course", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("course")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("griffined_api.Models.CourseMember", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("Teacherid")
                        .HasColumnType("int");

                    b.Property<int>("studentId")
                        .HasColumnType("int");

                    b.Property<int>("studySubjectId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Teacherid");

                    b.HasIndex("studentId");

                    b.HasIndex("studySubjectId");

                    b.ToTable("CourseMembers");
                });

            modelBuilder.Entity("griffined_api.Models.Level", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.HasKey("id");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("griffined_api.Models.NewCourseRequest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("courseId")
                        .HasColumnType("int");

                    b.Property<int>("levelId")
                        .HasColumnType("int");

                    b.Property<int>("method")
                        .HasColumnType("int");

                    b.Property<int>("registrationRequestId")
                        .HasColumnType("int");

                    b.Property<int>("totalHours")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("courseId");

                    b.HasIndex("levelId");

                    b.HasIndex("registrationRequestId");

                    b.ToTable("NewCourseRequests");
                });

            modelBuilder.Entity("griffined_api.Models.NewCourseSubjectRequest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("hour")
                        .HasColumnType("int");

                    b.Property<int>("newCourseRequestId")
                        .HasColumnType("int");

                    b.Property<int>("subjectId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("newCourseRequestId");

                    b.HasIndex("subjectId");

                    b.ToTable("NewCourseSubjectRequests");
                });

            modelBuilder.Entity("griffined_api.Models.Parent", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("line")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("relationship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("studentId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("studentId")
                        .IsUnique();

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("griffined_api.Models.PaymentFile", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("file")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("registrationRequestId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("registrationRequestId");

                    b.ToTable("PaymentFile");
                });

            modelBuilder.Entity("griffined_api.Models.PreferredDay", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fromTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("studyCourseId")
                        .HasColumnType("int");

                    b.Property<string>("toTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("studyCourseId");

                    b.ToTable("PreferredDays");
                });

            modelBuilder.Entity("griffined_api.Models.PreferredDayRequest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fromTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("registrationRequestId")
                        .HasColumnType("int");

                    b.Property<string>("toTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("registrationRequestId");

                    b.ToTable("PreferredDayRequests");
                });

            modelBuilder.Entity("griffined_api.Models.RegistrationRequest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("byEAId")
                        .HasColumnType("int");

                    b.Property<int>("byECId")
                        .HasColumnType("int");

                    b.Property<int>("byOAId")
                        .HasColumnType("int");

                    b.Property<string>("date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("paymentStatus")
                        .HasColumnType("int");

                    b.Property<int>("paymentType")
                        .HasColumnType("int");

                    b.Property<string>("section")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("RegistrationRequests");
                });

            modelBuilder.Entity("griffined_api.Models.RegistrationRequestMember", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("registrationRequestId")
                        .HasColumnType("int");

                    b.Property<int>("studentId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("registrationRequestId");

                    b.HasIndex("studentId");

                    b.ToTable("RegistrationRequestMembers");
                });

            modelBuilder.Entity("griffined_api.Models.Schedule", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("appointmentId")
                        .HasColumnType("int");

                    b.Property<string>("date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fromTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("toTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("appointmentId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("griffined_api.Models.Staff", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firebaseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("lName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("line")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("griffined_api.Models.StaffNotification", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("hasRead")
                        .HasColumnType("bit");

                    b.Property<int>("staffId")
                        .HasColumnType("int");

                    b.Property<int>("studyCourseId")
                        .HasColumnType("int");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("staffId");

                    b.HasIndex("studyCourseId");

                    b.ToTable("StaffNotifications");
                });

            modelBuilder.Entity("griffined_api.Models.Student", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("countryOfSchool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("dob")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firebaseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("healthInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hogInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("levelOfStudy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("line")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("profilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("program")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("school")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("targetScore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("targetUni")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("griffined_api.Models.StudentAddingRequest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("registrationRequestId")
                        .HasColumnType("int");

                    b.Property<int>("studyCourseId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("registrationRequestId")
                        .IsUnique();

                    b.HasIndex("studyCourseId");

                    b.ToTable("StudentAddingRequests");
                });

            modelBuilder.Entity("griffined_api.Models.StudentAdditionalFile", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("file")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("studentId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("studentId");

                    b.ToTable("StudentAdditionalFiles");
                });

            modelBuilder.Entity("griffined_api.Models.StudentAttendance", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("StudyClassid")
                        .HasColumnType("int");

                    b.Property<int>("attendance")
                        .HasColumnType("int");

                    b.Property<int>("attendanceId")
                        .HasColumnType("int");

                    b.Property<int>("studentAttendanceid")
                        .HasColumnType("int");

                    b.Property<int>("studentId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("StudyClassid");

                    b.HasIndex("studentAttendanceid");

                    b.HasIndex("studentId")
                        .IsUnique();

                    b.ToTable("StudentAttendances");
                });

            modelBuilder.Entity("griffined_api.Models.StudentNotification", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("hasRead")
                        .HasColumnType("bit");

                    b.Property<int>("studentId")
                        .HasColumnType("int");

                    b.Property<int>("studyCourseId")
                        .HasColumnType("int");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("studentId");

                    b.HasIndex("studyCourseId");

                    b.ToTable("StudentNotifications");
                });

            modelBuilder.Entity("griffined_api.Models.StudentReport", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("courseMemberId")
                        .HasColumnType("int");

                    b.Property<string>("dateUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dateUploaded")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("progression")
                        .HasColumnType("int");

                    b.Property<string>("report")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("teacherId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("courseMemberId");

                    b.HasIndex("teacherId");

                    b.ToTable("StudentReports");
                });

            modelBuilder.Entity("griffined_api.Models.StudyClass", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("classNumber")
                        .HasColumnType("int");

                    b.Property<bool>("isMakeup")
                        .HasColumnType("bit");

                    b.Property<int>("scheduleId")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<int>("studySubjectId")
                        .HasColumnType("int");

                    b.Property<int>("teacherId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("scheduleId")
                        .IsUnique();

                    b.HasIndex("studySubjectId");

                    b.HasIndex("teacherId");

                    b.ToTable("StudyClasses");
                });

            modelBuilder.Entity("griffined_api.Models.StudyCourse", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("StaffNotificationid")
                        .HasColumnType("int");

                    b.Property<int>("courseId")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("StaffNotificationid");

                    b.HasIndex("courseId");

                    b.ToTable("StudyCourses");
                });

            modelBuilder.Entity("griffined_api.Models.StudyCourseHistory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("byStaffId")
                        .HasColumnType("int");

                    b.Property<string>("dateUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("studyCourseId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("byStaffId");

                    b.HasIndex("studyCourseId");

                    b.ToTable("StudyCourseHistories");
                });

            modelBuilder.Entity("griffined_api.Models.StudySubject", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("studyCourseId")
                        .HasColumnType("int");

                    b.Property<int>("subjectId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("studyCourseId");

                    b.HasIndex("subjectId");

                    b.ToTable("StudySubjects");
                });

            modelBuilder.Entity("griffined_api.Models.Subject", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("courseId")
                        .HasColumnType("int");

                    b.Property<string>("subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("courseId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("griffined_api.Models.Teacher", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firebaseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("lName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("line")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("griffined_api.Models.TeacherNotification", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("appointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("hasRead")
                        .HasColumnType("bit");

                    b.Property<int>("studyCourseId")
                        .HasColumnType("int");

                    b.Property<int>("teacherId")
                        .HasColumnType("int");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("appointmentId");

                    b.HasIndex("studyCourseId");

                    b.HasIndex("teacherId");

                    b.ToTable("TeacherNotifications");
                });

            modelBuilder.Entity("griffined_api.Models.WorkTime", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fromTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("teacherId")
                        .HasColumnType("int");

                    b.Property<string>("toTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("teacherId");

                    b.ToTable("WorkTimes");
                });

            modelBuilder.Entity("griffined_api.Models.Address", b =>
                {
                    b.HasOne("griffined_api.Models.Student", "student")
                        .WithOne("address")
                        .HasForeignKey("griffined_api.Models.Address", "studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("student");
                });

            modelBuilder.Entity("griffined_api.Models.AppointmentMember", b =>
                {
                    b.HasOne("griffined_api.Models.Appointment", "appointment")
                        .WithMany("appointmentMembers")
                        .HasForeignKey("appointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.Teacher", "teacher")
                        .WithMany("appointmentMembers")
                        .HasForeignKey("teacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("appointment");

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("griffined_api.Models.CancellationRequest", b =>
                {
                    b.HasOne("griffined_api.Models.StudySubject", null)
                        .WithMany("cancellationRequests")
                        .HasForeignKey("StudySubjectid");

                    b.HasOne("griffined_api.Models.Student", "student")
                        .WithMany("cancellationRequests")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.StudyClass", "studyClass")
                        .WithMany("cancellationRequests")
                        .HasForeignKey("studyClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.StudyCourse", "studyCourse")
                        .WithMany("cancellationRequests")
                        .HasForeignKey("studyCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.Teacher", "teacher")
                        .WithMany("cancellationRequests")
                        .HasForeignKey("teacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("student");

                    b.Navigation("studyClass");

                    b.Navigation("studyCourse");

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("griffined_api.Models.CourseMember", b =>
                {
                    b.HasOne("griffined_api.Models.Teacher", null)
                        .WithMany("courseMembers")
                        .HasForeignKey("Teacherid");

                    b.HasOne("griffined_api.Models.Student", "student")
                        .WithMany("courseMembers")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.StudySubject", "studySubject")
                        .WithMany()
                        .HasForeignKey("studySubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("student");

                    b.Navigation("studySubject");
                });

            modelBuilder.Entity("griffined_api.Models.NewCourseRequest", b =>
                {
                    b.HasOne("griffined_api.Models.Course", "course")
                        .WithMany()
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.Level", "level")
                        .WithMany("newCourseRequests")
                        .HasForeignKey("levelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.RegistrationRequest", "registrationRequest")
                        .WithMany("newCourseRequests")
                        .HasForeignKey("registrationRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");

                    b.Navigation("level");

                    b.Navigation("registrationRequest");
                });

            modelBuilder.Entity("griffined_api.Models.NewCourseSubjectRequest", b =>
                {
                    b.HasOne("griffined_api.Models.NewCourseRequest", "newCourseRequest")
                        .WithMany()
                        .HasForeignKey("newCourseRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.Subject", "subject")
                        .WithMany("newCourseSubjectRequests")
                        .HasForeignKey("subjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("newCourseRequest");

                    b.Navigation("subject");
                });

            modelBuilder.Entity("griffined_api.Models.Parent", b =>
                {
                    b.HasOne("griffined_api.Models.Student", "student")
                        .WithOne("parent")
                        .HasForeignKey("griffined_api.Models.Parent", "studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("student");
                });

            modelBuilder.Entity("griffined_api.Models.PaymentFile", b =>
                {
                    b.HasOne("griffined_api.Models.RegistrationRequest", "registrationRequest")
                        .WithMany("paymentFiles")
                        .HasForeignKey("registrationRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("registrationRequest");
                });

            modelBuilder.Entity("griffined_api.Models.PreferredDay", b =>
                {
                    b.HasOne("griffined_api.Models.StudyCourse", "studyCourse")
                        .WithMany("preferredDays")
                        .HasForeignKey("studyCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("studyCourse");
                });

            modelBuilder.Entity("griffined_api.Models.PreferredDayRequest", b =>
                {
                    b.HasOne("griffined_api.Models.RegistrationRequest", "registrationRequest")
                        .WithMany("preferredDayRequests")
                        .HasForeignKey("registrationRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("registrationRequest");
                });

            modelBuilder.Entity("griffined_api.Models.RegistrationRequestMember", b =>
                {
                    b.HasOne("griffined_api.Models.RegistrationRequest", "registrationRequest")
                        .WithMany("registrationRequestMembers")
                        .HasForeignKey("registrationRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.Student", "student")
                        .WithMany("registrationRequestMembers")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("registrationRequest");

                    b.Navigation("student");
                });

            modelBuilder.Entity("griffined_api.Models.Schedule", b =>
                {
                    b.HasOne("griffined_api.Models.Appointment", "appointment")
                        .WithMany("schedules")
                        .HasForeignKey("appointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("appointment");
                });

            modelBuilder.Entity("griffined_api.Models.StaffNotification", b =>
                {
                    b.HasOne("griffined_api.Models.Staff", "staff")
                        .WithMany("staffNotifications")
                        .HasForeignKey("staffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.StudyCourse", "studyCourse")
                        .WithMany()
                        .HasForeignKey("studyCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("staff");

                    b.Navigation("studyCourse");
                });

            modelBuilder.Entity("griffined_api.Models.StudentAddingRequest", b =>
                {
                    b.HasOne("griffined_api.Models.RegistrationRequest", "request")
                        .WithOne("studentAddingRequest")
                        .HasForeignKey("griffined_api.Models.StudentAddingRequest", "registrationRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.StudyCourse", "studyCourse")
                        .WithMany()
                        .HasForeignKey("studyCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("request");

                    b.Navigation("studyCourse");
                });

            modelBuilder.Entity("griffined_api.Models.StudentAdditionalFile", b =>
                {
                    b.HasOne("griffined_api.Models.Student", "student")
                        .WithMany("additionalFiles")
                        .HasForeignKey("studentId");

                    b.Navigation("student");
                });

            modelBuilder.Entity("griffined_api.Models.StudentAttendance", b =>
                {
                    b.HasOne("griffined_api.Models.StudyClass", null)
                        .WithMany("attendances")
                        .HasForeignKey("StudyClassid");

                    b.HasOne("griffined_api.Models.StudentAttendance", "studentAttendance")
                        .WithMany()
                        .HasForeignKey("studentAttendanceid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.Student", "student")
                        .WithOne("attendance")
                        .HasForeignKey("griffined_api.Models.StudentAttendance", "studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("student");

                    b.Navigation("studentAttendance");
                });

            modelBuilder.Entity("griffined_api.Models.StudentNotification", b =>
                {
                    b.HasOne("griffined_api.Models.Student", "student")
                        .WithMany("studentNotifications")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.StudyCourse", "studyCourse")
                        .WithMany("studentNotifications")
                        .HasForeignKey("studyCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("student");

                    b.Navigation("studyCourse");
                });

            modelBuilder.Entity("griffined_api.Models.StudentReport", b =>
                {
                    b.HasOne("griffined_api.Models.CourseMember", "courseMember")
                        .WithMany("studentReports")
                        .HasForeignKey("courseMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.Teacher", "teacher")
                        .WithMany("studentReports")
                        .HasForeignKey("teacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("courseMember");

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("griffined_api.Models.StudyClass", b =>
                {
                    b.HasOne("griffined_api.Models.Schedule", "schedule")
                        .WithOne("studyClass")
                        .HasForeignKey("griffined_api.Models.StudyClass", "scheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.StudySubject", "studySubject")
                        .WithMany()
                        .HasForeignKey("studySubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.Teacher", "teacher")
                        .WithMany("studyClasses")
                        .HasForeignKey("teacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("schedule");

                    b.Navigation("studySubject");

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("griffined_api.Models.StudyCourse", b =>
                {
                    b.HasOne("griffined_api.Models.StaffNotification", null)
                        .WithMany("studyCourses")
                        .HasForeignKey("StaffNotificationid");

                    b.HasOne("griffined_api.Models.Course", "course")
                        .WithMany()
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");
                });

            modelBuilder.Entity("griffined_api.Models.StudyCourseHistory", b =>
                {
                    b.HasOne("griffined_api.Models.Staff", "byStaff")
                        .WithMany("studyCourseHistories")
                        .HasForeignKey("byStaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.StudyCourse", "studyCourse")
                        .WithMany("studyCourseHistories")
                        .HasForeignKey("studyCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("byStaff");

                    b.Navigation("studyCourse");
                });

            modelBuilder.Entity("griffined_api.Models.StudySubject", b =>
                {
                    b.HasOne("griffined_api.Models.StudyCourse", "studyCourse")
                        .WithMany("studySubjects")
                        .HasForeignKey("studyCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.Subject", "subject")
                        .WithMany("studySubjects")
                        .HasForeignKey("subjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("studyCourse");

                    b.Navigation("subject");
                });

            modelBuilder.Entity("griffined_api.Models.Subject", b =>
                {
                    b.HasOne("griffined_api.Models.Course", "course")
                        .WithMany("subjects")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");
                });

            modelBuilder.Entity("griffined_api.Models.TeacherNotification", b =>
                {
                    b.HasOne("griffined_api.Models.Appointment", "appointment")
                        .WithMany()
                        .HasForeignKey("appointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.StudyCourse", "studyCourse")
                        .WithMany("teacherNotifications")
                        .HasForeignKey("studyCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.Teacher", "teacher")
                        .WithMany("teacherNotifications")
                        .HasForeignKey("teacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("appointment");

                    b.Navigation("studyCourse");

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("griffined_api.Models.WorkTime", b =>
                {
                    b.HasOne("griffined_api.Models.Teacher", "teacher")
                        .WithMany("workTimes")
                        .HasForeignKey("teacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("griffined_api.Models.Appointment", b =>
                {
                    b.Navigation("appointmentMembers");

                    b.Navigation("schedules");
                });

            modelBuilder.Entity("griffined_api.Models.Course", b =>
                {
                    b.Navigation("subjects");
                });

            modelBuilder.Entity("griffined_api.Models.CourseMember", b =>
                {
                    b.Navigation("studentReports");
                });

            modelBuilder.Entity("griffined_api.Models.Level", b =>
                {
                    b.Navigation("newCourseRequests");
                });

            modelBuilder.Entity("griffined_api.Models.RegistrationRequest", b =>
                {
                    b.Navigation("newCourseRequests");

                    b.Navigation("paymentFiles");

                    b.Navigation("preferredDayRequests");

                    b.Navigation("registrationRequestMembers");

                    b.Navigation("studentAddingRequest");
                });

            modelBuilder.Entity("griffined_api.Models.Schedule", b =>
                {
                    b.Navigation("studyClass")
                        .IsRequired();
                });

            modelBuilder.Entity("griffined_api.Models.Staff", b =>
                {
                    b.Navigation("staffNotifications");

                    b.Navigation("studyCourseHistories");
                });

            modelBuilder.Entity("griffined_api.Models.StaffNotification", b =>
                {
                    b.Navigation("studyCourses");
                });

            modelBuilder.Entity("griffined_api.Models.Student", b =>
                {
                    b.Navigation("additionalFiles");

                    b.Navigation("address");

                    b.Navigation("attendance");

                    b.Navigation("cancellationRequests");

                    b.Navigation("courseMembers");

                    b.Navigation("parent");

                    b.Navigation("registrationRequestMembers");

                    b.Navigation("studentNotifications");
                });

            modelBuilder.Entity("griffined_api.Models.StudyClass", b =>
                {
                    b.Navigation("attendances");

                    b.Navigation("cancellationRequests");
                });

            modelBuilder.Entity("griffined_api.Models.StudyCourse", b =>
                {
                    b.Navigation("cancellationRequests");

                    b.Navigation("preferredDays");

                    b.Navigation("studentNotifications");

                    b.Navigation("studyCourseHistories");

                    b.Navigation("studySubjects");

                    b.Navigation("teacherNotifications");
                });

            modelBuilder.Entity("griffined_api.Models.StudySubject", b =>
                {
                    b.Navigation("cancellationRequests");
                });

            modelBuilder.Entity("griffined_api.Models.Subject", b =>
                {
                    b.Navigation("newCourseSubjectRequests");

                    b.Navigation("studySubjects");
                });

            modelBuilder.Entity("griffined_api.Models.Teacher", b =>
                {
                    b.Navigation("appointmentMembers");

                    b.Navigation("cancellationRequests");

                    b.Navigation("courseMembers");

                    b.Navigation("studentReports");

                    b.Navigation("studyClasses");

                    b.Navigation("teacherNotifications");

                    b.Navigation("workTimes");
                });
#pragma warning restore 612, 618
        }
    }
}
