// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using griffined_api.Data;

#nullable disable

namespace griffinedapi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231012075307_Fix_AppointmentHistory_Data")]
    partial class FixAppointmentHistoryData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("griffined_api.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("Subdistrict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zipcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique()
                        .HasFilter("[StudentId] IS NOT NULL");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentStatus")
                        .HasColumnType("int");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByStaffId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByStaffId");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.AppointmentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("AppointmentSlotId")
                        .HasColumnType("int");

                    b.Property<int>("Method")
                        .HasColumnType("int");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("AppointmentSlotId");

                    b.HasIndex("StaffId");

                    b.HasIndex("TeacherId");

                    b.ToTable("AppointmentHistory", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.AppointmentMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("AppointmentMember", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.AppointmentSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("AppointmentSlotStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ScheduleId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ScheduleId")
                        .IsUnique();

                    b.ToTable("AppointmentSlot", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.ClassCancellationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RejectedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestedRole")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("StudyClassId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("StudyCourseId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("StudySubjectId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("TakenByEAId")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudyClassId");

                    b.HasIndex("StudyCourseId");

                    b.HasIndex("StudySubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ClassCancellationRequest", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("course")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Level", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.NewCoursePreferredDayRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("FromTime")
                        .HasColumnType("time");

                    b.Property<int?>("RegistrationRequestId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ToTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationRequestId");

                    b.ToTable("NewCoursePreferredDayRequest", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.NewCourseRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LevelId")
                        .HasColumnType("int");

                    b.Property<int>("Method")
                        .HasColumnType("int");

                    b.Property<int?>("RegistrationRequestId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StudyCourseId")
                        .HasColumnType("int");

                    b.Property<int>("StudyCourseType")
                        .HasColumnType("int");

                    b.Property<double>("TotalHours")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LevelId");

                    b.HasIndex("RegistrationRequestId");

                    b.HasIndex("StudyCourseId")
                        .IsUnique()
                        .HasFilter("[StudyCourseId] IS NOT NULL");

                    b.ToTable("NewCourseRequest", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.NewCourseSubjectRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Hour")
                        .HasColumnType("float");

                    b.Property<int?>("NewCourseRequestId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NewCourseRequestId");

                    b.HasIndex("SubjectId");

                    b.ToTable("NewCourseSubjectRequest", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.Parent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relationship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique()
                        .HasFilter("[StudentId] IS NOT NULL");

                    b.ToTable("Parent", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.ProfilePicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique()
                        .HasFilter("[StudentId] IS NOT NULL");

                    b.ToTable("ProfilePicture", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.RegistrationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CancelledBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByStaffId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasSchedule")
                        .HasColumnType("bit");

                    b.Property<bool>("NewCourseDetailError")
                        .HasColumnType("bit");

                    b.Property<int?>("PaymentByStaffId")
                        .HasColumnType("int");

                    b.Property<bool>("PaymentError")
                        .HasColumnType("bit");

                    b.Property<int?>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentType")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewedByStaffId")
                        .HasColumnType("int");

                    b.Property<bool>("ScheduleError")
                        .HasColumnType("bit");

                    b.Property<int?>("ScheduledByStaffId")
                        .HasColumnType("int");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TakenByEAId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RegistrationRequest", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.RegistrationRequestComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RegistrationRequestId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("StaffId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationRequestId");

                    b.HasIndex("StaffId");

                    b.ToTable("RegistrationRequestComment", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.RegistrationRequestMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("RegistrationRequestId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationRequestId");

                    b.HasIndex("StudentId");

                    b.ToTable("RegistrationRequestMember", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.RegistrationRequestPaymentFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegistrationRequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationRequestId");

                    b.ToTable("RegistrationRequestPaymentFile", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("FromTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("ToTime")
                        .HasColumnType("time");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.ToTable("Schedule", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirebaseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Line")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Staff", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.StaffNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CancellationRequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegistrationRequestId")
                        .HasColumnType("int");

                    b.Property<int?>("StaffId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("StudyCourseId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CancellationRequestId");

                    b.HasIndex("RegistrationRequestId");

                    b.HasIndex("StaffId");

                    b.HasIndex("StudyCourseId");

                    b.ToTable("StaffNotification", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryOfSchool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirebaseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealthInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HogInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("LevelOfStudy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Program")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("School")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetScore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetUniversity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.StudentAddingRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("RegistrationRequestId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("StudyCourseId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("StudyCourseType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationRequestId");

                    b.HasIndex("StudyCourseId");

                    b.ToTable("StudentAddingRequest", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.StudentAddingSubjectRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("StudentAddingRequestId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("StudySubjectId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentAddingRequestId");

                    b.HasIndex("StudySubjectId");

                    b.ToTable("StudentAddingSubjectRequest", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.StudentAdditionalFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAdditionalFile", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.StudentAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Attendance")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("StudyClassId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudyClassId");

                    b.ToTable("StudentAttendance", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.StudentNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("StudyCourseId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudyCourseId");

                    b.ToTable("StudentNotification", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.StudentReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUploaded")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Progression")
                        .HasColumnType("int");

                    b.Property<int?>("StudySubjectMemberId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudySubjectMemberId");

                    b.HasIndex("TeacherId");

                    b.ToTable("StudentReport", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.StudyClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsMakeup")
                        .HasColumnType("bit");

                    b.Property<string>("Room")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScheduleId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("StudyCourseId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("StudySubjectId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId")
                        .IsUnique();

                    b.HasIndex("StudyCourseId");

                    b.HasIndex("StudySubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("StudyClass", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.StudyCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LevelId")
                        .HasColumnType("int");

                    b.Property<int>("Method")
                        .HasColumnType("int");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StudyCourseType")
                        .HasColumnType("int");

                    b.Property<double>("TotalHour")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LevelId");

                    b.HasIndex("Status");

                    b.ToTable("StudyCourse", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.StudyCourseHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaffId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("StudyCourseId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("StudyCourseId");

                    b.HasIndex("Type");

                    b.ToTable("StudyCourseHistory", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.StudySubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Hour")
                        .HasColumnType("float");

                    b.Property<int?>("StudyCourseId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudyCourseId");

                    b.HasIndex("SubjectId");

                    b.ToTable("StudySubject", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.StudySubjectMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CourseJoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("StudySubjectId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudySubjectId");

                    b.ToTable("StudySubjectMember", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.StudySubjectTeacher", b =>
                {
                    b.Property<int>("StudySubjectTeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudySubjectTeacherId"));

                    b.Property<DateTime>("CourseJoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudySubjectMemberId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("StudySubjectTeacherId");

                    b.HasIndex("StudySubjectMemberId");

                    b.HasIndex("TeacherId");

                    b.ToTable("StudySubjectTeacher", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Subject", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirebaseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Line")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teacher", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.TeacherNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudyCourseId")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("StudyCourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherNotification", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.WorkTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("FromTime")
                        .HasColumnType("time");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ToTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("WorkTime", (string)null);
                });

            modelBuilder.Entity("griffined_api.Models.Address", b =>
                {
                    b.HasOne("griffined_api.Models.Student", "Student")
                        .WithOne("Address")
                        .HasForeignKey("griffined_api.Models.Address", "StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("griffined_api.Models.Appointment", b =>
                {
                    b.HasOne("griffined_api.Models.Staff", "Staff")
                        .WithMany("Appointments")
                        .HasForeignKey("CreatedByStaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("griffined_api.Models.AppointmentHistory", b =>
                {
                    b.HasOne("griffined_api.Models.Appointment", "Appointment")
                        .WithMany("AppointmentHistories")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.AppointmentSlot", "AppointmentSlot")
                        .WithMany("AppointmentHistories")
                        .HasForeignKey("AppointmentSlotId");

                    b.HasOne("griffined_api.Models.Staff", "Staff")
                        .WithMany("AppointmentHistories")
                        .HasForeignKey("StaffId");

                    b.HasOne("griffined_api.Models.Teacher", "Teacher")
                        .WithMany("AppointmentHistories")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Appointment");

                    b.Navigation("AppointmentSlot");

                    b.Navigation("Staff");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("griffined_api.Models.AppointmentMember", b =>
                {
                    b.HasOne("griffined_api.Models.Appointment", "Appointment")
                        .WithMany("AppointmentMembers")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.Teacher", "Teacher")
                        .WithMany("AppointmentMembers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("griffined_api.Models.AppointmentSlot", b =>
                {
                    b.HasOne("griffined_api.Models.Appointment", "Appointment")
                        .WithMany("AppointmentSlots")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.Schedule", "Schedule")
                        .WithOne("AppointmentSlot")
                        .HasForeignKey("griffined_api.Models.AppointmentSlot", "ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("griffined_api.Models.ClassCancellationRequest", b =>
                {
                    b.HasOne("griffined_api.Models.Student", "Student")
                        .WithMany("ClassCancellationRequests")
                        .HasForeignKey("StudentId");

                    b.HasOne("griffined_api.Models.StudyClass", "StudyClass")
                        .WithMany("ClassCancellationRequests")
                        .HasForeignKey("StudyClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.StudyCourse", "StudyCourse")
                        .WithMany("ClassCancellationRequests")
                        .HasForeignKey("StudyCourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.StudySubject", "StudySubject")
                        .WithMany("ClassCancellationRequests")
                        .HasForeignKey("StudySubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.Teacher", "Teacher")
                        .WithMany("ClassCancellationRequests")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Student");

                    b.Navigation("StudyClass");

                    b.Navigation("StudyCourse");

                    b.Navigation("StudySubject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("griffined_api.Models.Level", b =>
                {
                    b.HasOne("griffined_api.Models.Course", "Course")
                        .WithMany("Levels")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("griffined_api.Models.NewCoursePreferredDayRequest", b =>
                {
                    b.HasOne("griffined_api.Models.RegistrationRequest", "RegistrationRequest")
                        .WithMany("NewCoursePreferredDayRequests")
                        .HasForeignKey("RegistrationRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RegistrationRequest");
                });

            modelBuilder.Entity("griffined_api.Models.NewCourseRequest", b =>
                {
                    b.HasOne("griffined_api.Models.Course", "Course")
                        .WithMany("NewCourseRequests")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.Level", "Level")
                        .WithMany("NewCourseRequests")
                        .HasForeignKey("LevelId");

                    b.HasOne("griffined_api.Models.RegistrationRequest", "RegistrationRequest")
                        .WithMany("NewCourseRequests")
                        .HasForeignKey("RegistrationRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.StudyCourse", "StudyCourse")
                        .WithOne("NewCourseRequest")
                        .HasForeignKey("griffined_api.Models.NewCourseRequest", "StudyCourseId");

                    b.Navigation("Course");

                    b.Navigation("Level");

                    b.Navigation("RegistrationRequest");

                    b.Navigation("StudyCourse");
                });

            modelBuilder.Entity("griffined_api.Models.NewCourseSubjectRequest", b =>
                {
                    b.HasOne("griffined_api.Models.NewCourseRequest", "NewCourseRequest")
                        .WithMany("NewCourseSubjectRequests")
                        .HasForeignKey("NewCourseRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.Subject", "Subject")
                        .WithMany("NewCourseSubjectRequests")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NewCourseRequest");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("griffined_api.Models.Parent", b =>
                {
                    b.HasOne("griffined_api.Models.Student", "Student")
                        .WithOne("Parent")
                        .HasForeignKey("griffined_api.Models.Parent", "StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("griffined_api.Models.ProfilePicture", b =>
                {
                    b.HasOne("griffined_api.Models.Student", "Student")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("griffined_api.Models.ProfilePicture", "StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("griffined_api.Models.RegistrationRequestComment", b =>
                {
                    b.HasOne("griffined_api.Models.RegistrationRequest", "RegistrationRequest")
                        .WithMany("RegistrationRequestComments")
                        .HasForeignKey("RegistrationRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.Staff", "Staff")
                        .WithMany("RegistrationRequestComments")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RegistrationRequest");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("griffined_api.Models.RegistrationRequestMember", b =>
                {
                    b.HasOne("griffined_api.Models.RegistrationRequest", "RegistrationRequest")
                        .WithMany("RegistrationRequestMembers")
                        .HasForeignKey("RegistrationRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.Student", "Student")
                        .WithMany("RegistrationRequestMembers")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RegistrationRequest");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("griffined_api.Models.RegistrationRequestPaymentFile", b =>
                {
                    b.HasOne("griffined_api.Models.RegistrationRequest", "RegistrationRequest")
                        .WithMany("RegistrationRequestPaymentFiles")
                        .HasForeignKey("RegistrationRequestId");

                    b.Navigation("RegistrationRequest");
                });

            modelBuilder.Entity("griffined_api.Models.StaffNotification", b =>
                {
                    b.HasOne("griffined_api.Models.ClassCancellationRequest", "CancellationRequest")
                        .WithMany("StaffNotifications")
                        .HasForeignKey("CancellationRequestId");

                    b.HasOne("griffined_api.Models.RegistrationRequest", "RegistrationRequest")
                        .WithMany("StaffNotifications")
                        .HasForeignKey("RegistrationRequestId");

                    b.HasOne("griffined_api.Models.Staff", "Staff")
                        .WithMany("StaffNotifications")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.StudyCourse", null)
                        .WithMany("StaffNotifications")
                        .HasForeignKey("StudyCourseId");

                    b.Navigation("CancellationRequest");

                    b.Navigation("RegistrationRequest");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("griffined_api.Models.StudentAddingRequest", b =>
                {
                    b.HasOne("griffined_api.Models.RegistrationRequest", "RegistrationRequest")
                        .WithMany("StudentAddingRequest")
                        .HasForeignKey("RegistrationRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.StudyCourse", "StudyCourse")
                        .WithMany("StudentAddingRequests")
                        .HasForeignKey("StudyCourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RegistrationRequest");

                    b.Navigation("StudyCourse");
                });

            modelBuilder.Entity("griffined_api.Models.StudentAddingSubjectRequest", b =>
                {
                    b.HasOne("griffined_api.Models.StudentAddingRequest", "StudentAddingRequest")
                        .WithMany("StudentAddingSubjectRequests")
                        .HasForeignKey("StudentAddingRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.StudySubject", "StudySubject")
                        .WithMany("StudentAddingSubjectRequests")
                        .HasForeignKey("StudySubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StudentAddingRequest");

                    b.Navigation("StudySubject");
                });

            modelBuilder.Entity("griffined_api.Models.StudentAdditionalFile", b =>
                {
                    b.HasOne("griffined_api.Models.Student", "Student")
                        .WithMany("AdditionalFiles")
                        .HasForeignKey("StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("griffined_api.Models.StudentAttendance", b =>
                {
                    b.HasOne("griffined_api.Models.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentId");

                    b.HasOne("griffined_api.Models.StudyClass", "StudyClass")
                        .WithMany("Attendances")
                        .HasForeignKey("StudyClassId");

                    b.Navigation("Student");

                    b.Navigation("StudyClass");
                });

            modelBuilder.Entity("griffined_api.Models.StudentNotification", b =>
                {
                    b.HasOne("griffined_api.Models.Student", "Student")
                        .WithMany("StudentNotifications")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.StudyCourse", "StudyCourse")
                        .WithMany("StudentNotifications")
                        .HasForeignKey("StudyCourseId");

                    b.Navigation("Student");

                    b.Navigation("StudyCourse");
                });

            modelBuilder.Entity("griffined_api.Models.StudentReport", b =>
                {
                    b.HasOne("griffined_api.Models.StudySubjectMember", "StudySubjectMember")
                        .WithMany("StudentReports")
                        .HasForeignKey("StudySubjectMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.Teacher", "Teacher")
                        .WithMany("StudentReports")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StudySubjectMember");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("griffined_api.Models.StudyClass", b =>
                {
                    b.HasOne("griffined_api.Models.Schedule", "Schedule")
                        .WithOne("StudyClass")
                        .HasForeignKey("griffined_api.Models.StudyClass", "ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.StudyCourse", "StudyCourse")
                        .WithMany("StudyClasses")
                        .HasForeignKey("StudyCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.StudySubject", "StudySubject")
                        .WithMany("StudyClasses")
                        .HasForeignKey("StudySubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.Teacher", "Teacher")
                        .WithMany("StudyClasses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Schedule");

                    b.Navigation("StudyCourse");

                    b.Navigation("StudySubject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("griffined_api.Models.StudyCourse", b =>
                {
                    b.HasOne("griffined_api.Models.Course", "Course")
                        .WithMany("StudyCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.Level", "Level")
                        .WithMany("StudyCourses")
                        .HasForeignKey("LevelId");

                    b.Navigation("Course");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("griffined_api.Models.StudyCourseHistory", b =>
                {
                    b.HasOne("griffined_api.Models.Staff", "Staff")
                        .WithMany("StudyCourseHistories")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.StudyCourse", "StudyCourse")
                        .WithMany("StudyCourseHistories")
                        .HasForeignKey("StudyCourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("StudyCourse");
                });

            modelBuilder.Entity("griffined_api.Models.StudySubject", b =>
                {
                    b.HasOne("griffined_api.Models.StudyCourse", "StudyCourse")
                        .WithMany("StudySubjects")
                        .HasForeignKey("StudyCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.Subject", "Subject")
                        .WithMany("StudySubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StudyCourse");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("griffined_api.Models.StudySubjectMember", b =>
                {
                    b.HasOne("griffined_api.Models.Student", "Student")
                        .WithMany("StudySubjectMember")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.StudySubject", "StudySubject")
                        .WithMany("StudySubjectMember")
                        .HasForeignKey("StudySubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("StudySubject");
                });

            modelBuilder.Entity("griffined_api.Models.StudySubjectTeacher", b =>
                {
                    b.HasOne("griffined_api.Models.StudySubjectMember", "StudySubjectMember")
                        .WithMany("StudySubjectTeachers")
                        .HasForeignKey("StudySubjectMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("griffined_api.Models.Teacher", "Teacher")
                        .WithMany("StudySubjectTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StudySubjectMember");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("griffined_api.Models.Subject", b =>
                {
                    b.HasOne("griffined_api.Models.Course", "Course")
                        .WithMany("Subjects")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("griffined_api.Models.TeacherNotification", b =>
                {
                    b.HasOne("griffined_api.Models.Appointment", "Appointment")
                        .WithMany("TeacherNotifications")
                        .HasForeignKey("AppointmentId");

                    b.HasOne("griffined_api.Models.StudyCourse", "StudyCourse")
                        .WithMany("TeacherNotifications")
                        .HasForeignKey("StudyCourseId");

                    b.HasOne("griffined_api.Models.Teacher", "Teacher")
                        .WithMany("TeacherNotifications")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("StudyCourse");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("griffined_api.Models.WorkTime", b =>
                {
                    b.HasOne("griffined_api.Models.Teacher", "Teacher")
                        .WithMany("WorkTimes")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("griffined_api.Models.Appointment", b =>
                {
                    b.Navigation("AppointmentHistories");

                    b.Navigation("AppointmentMembers");

                    b.Navigation("AppointmentSlots");

                    b.Navigation("TeacherNotifications");
                });

            modelBuilder.Entity("griffined_api.Models.AppointmentSlot", b =>
                {
                    b.Navigation("AppointmentHistories");
                });

            modelBuilder.Entity("griffined_api.Models.ClassCancellationRequest", b =>
                {
                    b.Navigation("StaffNotifications");
                });

            modelBuilder.Entity("griffined_api.Models.Course", b =>
                {
                    b.Navigation("Levels");

                    b.Navigation("NewCourseRequests");

                    b.Navigation("StudyCourses");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("griffined_api.Models.Level", b =>
                {
                    b.Navigation("NewCourseRequests");

                    b.Navigation("StudyCourses");
                });

            modelBuilder.Entity("griffined_api.Models.NewCourseRequest", b =>
                {
                    b.Navigation("NewCourseSubjectRequests");
                });

            modelBuilder.Entity("griffined_api.Models.RegistrationRequest", b =>
                {
                    b.Navigation("NewCoursePreferredDayRequests");

                    b.Navigation("NewCourseRequests");

                    b.Navigation("RegistrationRequestComments");

                    b.Navigation("RegistrationRequestMembers");

                    b.Navigation("RegistrationRequestPaymentFiles");

                    b.Navigation("StaffNotifications");

                    b.Navigation("StudentAddingRequest");
                });

            modelBuilder.Entity("griffined_api.Models.Schedule", b =>
                {
                    b.Navigation("AppointmentSlot");

                    b.Navigation("StudyClass");
                });

            modelBuilder.Entity("griffined_api.Models.Staff", b =>
                {
                    b.Navigation("AppointmentHistories");

                    b.Navigation("Appointments");

                    b.Navigation("RegistrationRequestComments");

                    b.Navigation("StaffNotifications");

                    b.Navigation("StudyCourseHistories");
                });

            modelBuilder.Entity("griffined_api.Models.Student", b =>
                {
                    b.Navigation("AdditionalFiles");

                    b.Navigation("Address");

                    b.Navigation("Attendances");

                    b.Navigation("ClassCancellationRequests");

                    b.Navigation("Parent");

                    b.Navigation("ProfilePicture");

                    b.Navigation("RegistrationRequestMembers");

                    b.Navigation("StudentNotifications");

                    b.Navigation("StudySubjectMember");
                });

            modelBuilder.Entity("griffined_api.Models.StudentAddingRequest", b =>
                {
                    b.Navigation("StudentAddingSubjectRequests");
                });

            modelBuilder.Entity("griffined_api.Models.StudyClass", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("ClassCancellationRequests");
                });

            modelBuilder.Entity("griffined_api.Models.StudyCourse", b =>
                {
                    b.Navigation("ClassCancellationRequests");

                    b.Navigation("NewCourseRequest");

                    b.Navigation("StaffNotifications");

                    b.Navigation("StudentAddingRequests");

                    b.Navigation("StudentNotifications");

                    b.Navigation("StudyClasses");

                    b.Navigation("StudyCourseHistories");

                    b.Navigation("StudySubjects");

                    b.Navigation("TeacherNotifications");
                });

            modelBuilder.Entity("griffined_api.Models.StudySubject", b =>
                {
                    b.Navigation("ClassCancellationRequests");

                    b.Navigation("StudentAddingSubjectRequests");

                    b.Navigation("StudyClasses");

                    b.Navigation("StudySubjectMember");
                });

            modelBuilder.Entity("griffined_api.Models.StudySubjectMember", b =>
                {
                    b.Navigation("StudentReports");

                    b.Navigation("StudySubjectTeachers");
                });

            modelBuilder.Entity("griffined_api.Models.Subject", b =>
                {
                    b.Navigation("NewCourseSubjectRequests");

                    b.Navigation("StudySubjects");
                });

            modelBuilder.Entity("griffined_api.Models.Teacher", b =>
                {
                    b.Navigation("AppointmentHistories");

                    b.Navigation("AppointmentMembers");

                    b.Navigation("ClassCancellationRequests");

                    b.Navigation("StudentReports");

                    b.Navigation("StudyClasses");

                    b.Navigation("StudySubjectTeachers");

                    b.Navigation("TeacherNotifications");

                    b.Navigation("WorkTimes");
                });
#pragma warning restore 612, 618
        }
    }
}
